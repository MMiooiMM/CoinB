/* tslint:disable */
/* eslint-disable */
/**
 * CoinB | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountResponseDto
 */
export interface AccountResponseDto {
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDto
     */
    'accountId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDto
     */
    'accountName'?: string;
}
/**
 * 
 * @export
 * @interface AddAccountRequestDto
 */
export interface AddAccountRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AddAccountRequestDto
     */
    'accountName': string;
}
/**
 * 
 * @export
 * @interface AddCategoryRequestDto
 */
export interface AddCategoryRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AddCategoryRequestDto
     */
    'categoryName': string;
}
/**
 * 
 * @export
 * @interface AddTransactionRequestDto
 */
export interface AddTransactionRequestDto {
    /**
     * 
     * @type {number}
     * @memberof AddTransactionRequestDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof AddTransactionRequestDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof AddTransactionRequestDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof AddTransactionRequestDto
     */
    'categoryId': number;
}
/**
 * 
 * @export
 * @interface CategoryResponseDto
 */
export interface CategoryResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryResponseDto
     */
    'categoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryResponseDto
     */
    'categoryName'?: string;
}
/**
 * 
 * @export
 * @interface TransactionResponseDto
 */
export interface TransactionResponseDto {
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    'transactionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    'categoryId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateAccountRequestDto
 */
export interface UpdateAccountRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountRequestDto
     */
    'accountName': string;
}
/**
 * 
 * @export
 * @interface UpdateCategoryRequestDto
 */
export interface UpdateCategoryRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCategoryRequestDto
     */
    'categoryName': string;
}
/**
 * 
 * @export
 * @interface UpdateTransactionRequestDto
 */
export interface UpdateTransactionRequestDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateTransactionRequestDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTransactionRequestDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTransactionRequestDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTransactionRequestDto
     */
    'categoryId': number;
}

/**
 * AccountEndpointApi - axios parameter creator
 * @export
 */
export const AccountEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddAccountRequestDto} addAccountRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount: async (addAccountRequestDto: AddAccountRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addAccountRequestDto' is not null or undefined
            assertParamExists('addAccount', 'addAccountRequestDto', addAccountRequestDto)
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAccountRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAccount', 'id', id)
            const localVarPath = `/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountById', 'id', id)
            const localVarPath = `/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAccountRequestDto} updateAccountRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (id: number, updateAccountRequestDto: UpdateAccountRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAccount', 'id', id)
            // verify required parameter 'updateAccountRequestDto' is not null or undefined
            assertParamExists('updateAccount', 'updateAccountRequestDto', updateAccountRequestDto)
            const localVarPath = `/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountEndpointApi - functional programming interface
 * @export
 */
export const AccountEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddAccountRequestDto} addAccountRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccount(addAccountRequestDto: AddAccountRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccount(addAccountRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountEndpointApi.addAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountEndpointApi.deleteAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountEndpointApi.getAccountById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAccounts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAccounts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountEndpointApi.getAllAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAccountRequestDto} updateAccountRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(id: number, updateAccountRequestDto: UpdateAccountRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(id, updateAccountRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountEndpointApi.updateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountEndpointApi - factory interface
 * @export
 */
export const AccountEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {AddAccountRequestDto} addAccountRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount(addAccountRequestDto: AddAccountRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseDto> {
            return localVarFp.addAccount(addAccountRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAccount(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseDto> {
            return localVarFp.getAccountById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(options?: RawAxiosRequestConfig): AxiosPromise<Array<AccountResponseDto>> {
            return localVarFp.getAllAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAccountRequestDto} updateAccountRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(id: number, updateAccountRequestDto: UpdateAccountRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseDto> {
            return localVarFp.updateAccount(id, updateAccountRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountEndpointApi - object-oriented interface
 * @export
 * @class AccountEndpointApi
 * @extends {BaseAPI}
 */
export class AccountEndpointApi extends BaseAPI {
    /**
     * 
     * @param {AddAccountRequestDto} addAccountRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountEndpointApi
     */
    public addAccount(addAccountRequestDto: AddAccountRequestDto, options?: RawAxiosRequestConfig) {
        return AccountEndpointApiFp(this.configuration).addAccount(addAccountRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountEndpointApi
     */
    public deleteAccount(id: number, options?: RawAxiosRequestConfig) {
        return AccountEndpointApiFp(this.configuration).deleteAccount(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountEndpointApi
     */
    public getAccountById(id: number, options?: RawAxiosRequestConfig) {
        return AccountEndpointApiFp(this.configuration).getAccountById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountEndpointApi
     */
    public getAllAccounts(options?: RawAxiosRequestConfig) {
        return AccountEndpointApiFp(this.configuration).getAllAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateAccountRequestDto} updateAccountRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountEndpointApi
     */
    public updateAccount(id: number, updateAccountRequestDto: UpdateAccountRequestDto, options?: RawAxiosRequestConfig) {
        return AccountEndpointApiFp(this.configuration).updateAccount(id, updateAccountRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryEndpointApi - axios parameter creator
 * @export
 */
export const CategoryEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddCategoryRequestDto} addCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (addCategoryRequestDto: AddCategoryRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCategoryRequestDto' is not null or undefined
            assertParamExists('addCategory', 'addCategoryRequestDto', addCategoryRequestDto)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCategoryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategory', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoryById', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategory', 'id', id)
            // verify required parameter 'updateCategoryRequestDto' is not null or undefined
            assertParamExists('updateCategory', 'updateCategoryRequestDto', updateCategoryRequestDto)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryEndpointApi - functional programming interface
 * @export
 */
export const CategoryEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddCategoryRequestDto} addCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(addCategoryRequestDto: AddCategoryRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(addCategoryRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryEndpointApi.addCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryEndpointApi.deleteCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryEndpointApi.getAllCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryEndpointApi.getCategoryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, updateCategoryRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryEndpointApi.updateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryEndpointApi - factory interface
 * @export
 */
export const CategoryEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {AddCategoryRequestDto} addCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(addCategoryRequestDto: AddCategoryRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponseDto> {
            return localVarFp.addCategory(addCategoryRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryResponseDto>> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponseDto> {
            return localVarFp.getCategoryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponseDto> {
            return localVarFp.updateCategory(id, updateCategoryRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryEndpointApi - object-oriented interface
 * @export
 * @class CategoryEndpointApi
 * @extends {BaseAPI}
 */
export class CategoryEndpointApi extends BaseAPI {
    /**
     * 
     * @param {AddCategoryRequestDto} addCategoryRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    public addCategory(addCategoryRequestDto: AddCategoryRequestDto, options?: RawAxiosRequestConfig) {
        return CategoryEndpointApiFp(this.configuration).addCategory(addCategoryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    public deleteCategory(id: number, options?: RawAxiosRequestConfig) {
        return CategoryEndpointApiFp(this.configuration).deleteCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    public getAllCategories(options?: RawAxiosRequestConfig) {
        return CategoryEndpointApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    public getCategoryById(id: number, options?: RawAxiosRequestConfig) {
        return CategoryEndpointApiFp(this.configuration).getCategoryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    public updateCategory(id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options?: RawAxiosRequestConfig) {
        return CategoryEndpointApiFp(this.configuration).updateCategory(id, updateCategoryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TransactionEndpointApi - axios parameter creator
 * @export
 */
export const TransactionEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} accountId 
         * @param {AddTransactionRequestDto} addTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTransaction: async (accountId: number, addTransactionRequestDto: AddTransactionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('addTransaction', 'accountId', accountId)
            // verify required parameter 'addTransactionRequestDto' is not null or undefined
            assertParamExists('addTransaction', 'addTransactionRequestDto', addTransactionRequestDto)
            const localVarPath = `/account/{accountId}/transaction`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTransactionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransaction: async (accountId: number, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteTransaction', 'accountId', accountId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTransaction', 'id', id)
            const localVarPath = `/account/{accountId}/transaction/{id}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionById: async (accountId: number, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getTransactionById', 'accountId', accountId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTransactionById', 'id', id)
            const localVarPath = `/account/{accountId}/transaction/{id}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByAccount: async (accountId: number, year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getTransactionsByAccount', 'accountId', accountId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTransactionsByAccount', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTransactionsByAccount', 'month', month)
            const localVarPath = `/account/{accountId}/transactions`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (year !== undefined) {
                localVarQueryParameter['Year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['Month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {UpdateTransactionRequestDto} updateTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction: async (accountId: number, id: number, updateTransactionRequestDto: UpdateTransactionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateTransaction', 'accountId', accountId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTransaction', 'id', id)
            // verify required parameter 'updateTransactionRequestDto' is not null or undefined
            assertParamExists('updateTransaction', 'updateTransactionRequestDto', updateTransactionRequestDto)
            const localVarPath = `/account/{accountId}/transaction/{id}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTransactionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionEndpointApi - functional programming interface
 * @export
 */
export const TransactionEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} accountId 
         * @param {AddTransactionRequestDto} addTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTransaction(accountId: number, addTransactionRequestDto: AddTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTransaction(accountId, addTransactionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionEndpointApi.addTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransaction(accountId: number, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTransaction(accountId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionEndpointApi.deleteTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionById(accountId: number, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionById(accountId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionEndpointApi.getTransactionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionsByAccount(accountId: number, year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionsByAccount(accountId, year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionEndpointApi.getTransactionsByAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {UpdateTransactionRequestDto} updateTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransaction(accountId: number, id: number, updateTransactionRequestDto: UpdateTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransaction(accountId, id, updateTransactionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionEndpointApi.updateTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionEndpointApi - factory interface
 * @export
 */
export const TransactionEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {number} accountId 
         * @param {AddTransactionRequestDto} addTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTransaction(accountId: number, addTransactionRequestDto: AddTransactionRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponseDto> {
            return localVarFp.addTransaction(accountId, addTransactionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransaction(accountId: number, id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTransaction(accountId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionById(accountId: number, id: number, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponseDto> {
            return localVarFp.getTransactionById(accountId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByAccount(accountId: number, year: number, month: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TransactionResponseDto>> {
            return localVarFp.getTransactionsByAccount(accountId, year, month, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} accountId 
         * @param {number} id 
         * @param {UpdateTransactionRequestDto} updateTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction(accountId: number, id: number, updateTransactionRequestDto: UpdateTransactionRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponseDto> {
            return localVarFp.updateTransaction(accountId, id, updateTransactionRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionEndpointApi - object-oriented interface
 * @export
 * @class TransactionEndpointApi
 * @extends {BaseAPI}
 */
export class TransactionEndpointApi extends BaseAPI {
    /**
     * 
     * @param {number} accountId 
     * @param {AddTransactionRequestDto} addTransactionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionEndpointApi
     */
    public addTransaction(accountId: number, addTransactionRequestDto: AddTransactionRequestDto, options?: RawAxiosRequestConfig) {
        return TransactionEndpointApiFp(this.configuration).addTransaction(accountId, addTransactionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} accountId 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionEndpointApi
     */
    public deleteTransaction(accountId: number, id: number, options?: RawAxiosRequestConfig) {
        return TransactionEndpointApiFp(this.configuration).deleteTransaction(accountId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} accountId 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionEndpointApi
     */
    public getTransactionById(accountId: number, id: number, options?: RawAxiosRequestConfig) {
        return TransactionEndpointApiFp(this.configuration).getTransactionById(accountId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} accountId 
     * @param {number} year 
     * @param {number} month 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionEndpointApi
     */
    public getTransactionsByAccount(accountId: number, year: number, month: number, options?: RawAxiosRequestConfig) {
        return TransactionEndpointApiFp(this.configuration).getTransactionsByAccount(accountId, year, month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} accountId 
     * @param {number} id 
     * @param {UpdateTransactionRequestDto} updateTransactionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionEndpointApi
     */
    public updateTransaction(accountId: number, id: number, updateTransactionRequestDto: UpdateTransactionRequestDto, options?: RawAxiosRequestConfig) {
        return TransactionEndpointApiFp(this.configuration).updateTransaction(accountId, id, updateTransactionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



